// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package filter

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type bindBindKey struct {
	Proto  uint8
	Family uint8
	_      [2]byte
	Addr   [4]uint32
	Port   uint16
	_      [2]byte
}

// loadBind returns the embedded CollectionSpec for bind.
func loadBind() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BindBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bind: %w", err)
	}

	return spec, err
}

// loadBindObjects loads bind and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bindObjects
//	*bindPrograms
//	*bindMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBindObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBind()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bindSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bindSpecs struct {
	bindProgramSpecs
	bindMapSpecs
	bindVariableSpecs
}

// bindProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bindProgramSpecs struct {
	XdpSockProg *ebpf.ProgramSpec `ebpf:"xdp_sock_prog"`
}

// bindMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bindMapSpecs struct {
	BindMap    *ebpf.MapSpec `ebpf:"bind_map"`
	QidconfMap *ebpf.MapSpec `ebpf:"qidconf_map"`
	XsksMap    *ebpf.MapSpec `ebpf:"xsks_map"`
}

// bindVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bindVariableSpecs struct {
}

// bindObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBindObjects or ebpf.CollectionSpec.LoadAndAssign.
type bindObjects struct {
	bindPrograms
	bindMaps
	bindVariables
}

func (o *bindObjects) Close() error {
	return _BindClose(
		&o.bindPrograms,
		&o.bindMaps,
	)
}

// bindMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBindObjects or ebpf.CollectionSpec.LoadAndAssign.
type bindMaps struct {
	BindMap    *ebpf.Map `ebpf:"bind_map"`
	QidconfMap *ebpf.Map `ebpf:"qidconf_map"`
	XsksMap    *ebpf.Map `ebpf:"xsks_map"`
}

func (m *bindMaps) Close() error {
	return _BindClose(
		m.BindMap,
		m.QidconfMap,
		m.XsksMap,
	)
}

// bindVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBindObjects or ebpf.CollectionSpec.LoadAndAssign.
type bindVariables struct {
}

// bindPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBindObjects or ebpf.CollectionSpec.LoadAndAssign.
type bindPrograms struct {
	XdpSockProg *ebpf.Program `ebpf:"xdp_sock_prog"`
}

func (p *bindPrograms) Close() error {
	return _BindClose(
		p.XdpSockProg,
	)
}

func _BindClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bind_bpfel.o
var _BindBytes []byte

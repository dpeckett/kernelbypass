// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package filter

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadAll returns the embedded CollectionSpec for all.
func loadAll() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_AllBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load all: %w", err)
	}

	return spec, err
}

// loadAllObjects loads all and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*allObjects
//	*allPrograms
//	*allMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadAllObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadAll()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// allSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type allSpecs struct {
	allProgramSpecs
	allMapSpecs
	allVariableSpecs
}

// allProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type allProgramSpecs struct {
	XdpSockProg *ebpf.ProgramSpec `ebpf:"xdp_sock_prog"`
}

// allMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type allMapSpecs struct {
	QidconfMap *ebpf.MapSpec `ebpf:"qidconf_map"`
	XsksMap    *ebpf.MapSpec `ebpf:"xsks_map"`
}

// allVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type allVariableSpecs struct {
}

// allObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadAllObjects or ebpf.CollectionSpec.LoadAndAssign.
type allObjects struct {
	allPrograms
	allMaps
	allVariables
}

func (o *allObjects) Close() error {
	return _AllClose(
		&o.allPrograms,
		&o.allMaps,
	)
}

// allMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadAllObjects or ebpf.CollectionSpec.LoadAndAssign.
type allMaps struct {
	QidconfMap *ebpf.Map `ebpf:"qidconf_map"`
	XsksMap    *ebpf.Map `ebpf:"xsks_map"`
}

func (m *allMaps) Close() error {
	return _AllClose(
		m.QidconfMap,
		m.XsksMap,
	)
}

// allVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadAllObjects or ebpf.CollectionSpec.LoadAndAssign.
type allVariables struct {
}

// allPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadAllObjects or ebpf.CollectionSpec.LoadAndAssign.
type allPrograms struct {
	XdpSockProg *ebpf.Program `ebpf:"xdp_sock_prog"`
}

func (p *allPrograms) Close() error {
	return _AllClose(
		p.XdpSockProg,
	)
}

func _AllClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed all_bpfeb.o
var _AllBytes []byte
